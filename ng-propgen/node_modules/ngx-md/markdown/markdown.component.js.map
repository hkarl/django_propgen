{"version":3,"file":"markdown.component.js","sourceRoot":"","sources":["../../.tmp/markdown/markdown.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  ElementRef,\n  OnInit,\n  AfterViewInit,\n  Input,\n  PLATFORM_ID,\n  Inject\n} from \"@angular/core\";\nimport { MarkdownService } from \"./markdown.service\";\nimport { isPlatformBrowser } from \"@angular/common\";\n\nimport * as Prism from \"prismjs\";\nimport \"./prism.languages\";\n\n@Component({\n  selector: \"markdown,[Markdown],ngx-md\",\n  template: \"<ng-content></ng-content>\",\n  styles: [\n    `.token.operator, .token.entity, .token.url, .language-css .token.string, .style .token.string {\n            background: none;\n        }`\n  ]\n})\nexport class MarkdownComponent implements OnInit {\n  private _path: string;\n  private _data: string;\n  private _md: any;\n  private _ext: string;\n  changeLog: string[] = [];\n\n  constructor(\n    private mdService: MarkdownService,\n    private el: ElementRef,\n    @Inject(PLATFORM_ID) private platformId: string\n  ) {}\n\n  ngOnInit() {}\n\n  @Input()\n  set path(value: string) {\n    if (value) {\n      this._path = value;\n      this.onPathChange();\n    }\n  }\n\n  @Input()\n  set data(value: string) {\n    if (value !== undefined) {\n      this._data = value;\n      this.onDataChange(value);\n    }\n  }\n\n  // on input\n  onDataChange(data: string) {\n    if (data !== undefined) {\n      this.el.nativeElement.innerHTML = this.mdService.compile(data);\n    } else {\n      this.el.nativeElement.innerHTML = \"\";\n    }\n    this.highlightContent(false);\n  }\n\n  /**\n   *  After view init\n   */\n  ngAfterViewInit() {\n    if (this._path) {\n      this.onPathChange();\n    } else if (!this._data) {\n      this.processRaw();\n    }\n  }\n\n  processRaw() {\n    this._md = this.prepare(decodeHtml(this.el.nativeElement.innerHTML));\n    this.el.nativeElement.innerHTML = this.mdService.compile(this._md);\n    this.highlightContent(false);\n  }\n\n  /**\n   * get remote conent;\n   */\n  onPathChange() {\n    this._ext =\n      this._path &&\n      this._path\n        .split(\".\")\n        .splice(-1)\n        .join();\n    this.mdService.getContent(this._path).subscribe(data => {\n      this._md =\n        this._ext !== \"md\" ? \"```\" + this._ext + \"\\n\" + data + \"\\n```\" : data;\n      this.el.nativeElement.innerHTML = this.mdService.compile(\n        this.prepare(this._md)\n      );\n      this.highlightContent(false);\n    }, err => this.handleError);\n  }\n\n  /**\n   * catch http error\n   */\n  private handleError(error: any): Promise<any> {\n    console.error(\"An error occurred\", error); // for demo purposes only\n    return Promise.reject(error.message || error);\n  }\n\n  /**\n   * Prepare string\n   */\n  prepare(raw: string) {\n    if (!raw) {\n      return \"\";\n    }\n    if (this._ext === \"md\" || !this.path) {\n      let isCodeBlock = false;\n      return raw\n        .split(\"\\n\")\n        .map((line: string) => {\n          if (this.trimLeft(line).substring(0, 3) === \"```\") {\n            isCodeBlock = !isCodeBlock;\n          }\n          return isCodeBlock ? line : line.trim();\n        })\n        .join(\"\\n\");\n    }\n    return raw.replace(/\\\"/g, \"'\");\n  }\n\n  /**\n   * Trim left whitespace\n   */\n  private trimLeft(line: string) {\n    return line.replace(/^\\s+|\\s+$/g, \"\");\n  }\n\n  /**\n   * Use Prism to highlight code snippets only on the browser\n   * @param {string} async param passed directly to Prism.highlightAll\n   */\n  private highlightContent(async: boolean): void {\n    if (isPlatformBrowser(this.platformId)) {\n      Prism.highlightAll(async);\n    }\n  }\n}\n\nfunction decodeHtml(html: string) {\n  // https://stackoverflow.com/a/7394787/588521\n  var txt = document.createElement(\"textarea\");\n  txt.innerHTML = html;\n  return txt.value;\n}\n"]}