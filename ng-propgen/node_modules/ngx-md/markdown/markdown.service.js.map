{"version":3,"file":"markdown.service.js","sourceRoot":"","sources":["../../.tmp/markdown/markdown.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpResponse } from \"@angular/common/http\";\nimport { Observable } from \"rxjs/Observable\";\nimport \"rxjs/add/observable/of\";\nimport \"rxjs/add/operator/map\";\nimport \"rxjs/add/operator/catch\";\n\nimport * as markedNs from \"marked\";\n\n@Injectable()\nexport class MarkdownService {\n  private _renderer: any = new markedNs.Renderer();\n  constructor(private _http: HttpClient) {\n    this.extendRenderer();\n    this.setMarkedOptions({});\n  }\n\n  //get the content from remote resource\n  getContent(path: string): Observable<Object> {\n    return this._http\n      .get(path, { responseType: \"text\" })\n      .map(this.extractData)\n      .catch(this.handleError);\n  }\n\n  public get renderer() {\n    return this._renderer;\n  }\n\n  // handle data\n  public extractData(res: string): string {\n    return res || \"\";\n  }\n\n  public setMarkedOptions(options: any) {\n    options = Object.assign(\n      {\n        gfm: true,\n        tables: true,\n        breaks: false,\n        pedantic: false,\n        sanitize: true,\n        smartLists: true,\n        smartypants: false\n      },\n      options\n    );\n    options.renderer = this._renderer;\n    markedNs.setOptions(options);\n  }\n\n  // comple markdown to html\n  public compile(data: string) {\n    return markedNs(data);\n  }\n\n  //handle error\n  private handleError(error: any): any {\n    let errMsg: string;\n    if (error instanceof fetch) {\n      const body = error.json() || \"\";\n      const err = body.error || JSON.stringify(body);\n      errMsg = `${error.status} - ${error.statusText || \"\"} ${err}`;\n    } else {\n      errMsg = error.message ? error.message : error.toString();\n    }\n    return Observable.throw(errMsg);\n  }\n\n  // extend marked render to support todo checkbox\n  private extendRenderer() {\n    this._renderer.listitem = function(text: string) {\n      if (/^\\s*\\[[x ]\\]\\s*/.test(text)) {\n        text = text\n          .replace(\n            /^\\s*\\[ \\]\\s*/,\n            '<input type=\"checkbox\" style=\" vertical-align: middle; margin: 0 0.2em 0.25em -1.6em; font-size: 16px; \" disabled> '\n          )\n          .replace(\n            /^\\s*\\[x\\]\\s*/,\n            '<input type=\"checkbox\" style=\" vertical-align: middle; margin: 0 0.2em 0.25em -1.6em; font-size: 16px; \" checked disabled> '\n          );\n        return '<li style=\"list-style: none\">' + text + \"</li>\";\n      } else {\n        return \"<li>\" + text + \"</li>\";\n      }\n    };\n  }\n}\n"]}