import {Component, OnDestroy} from '@angular/core';
import {ActivatedRoute, UrlSegment} from '@angular/router';
import {Subscription} from 'rxjs/Subscription';

export enum RouteMode {
  None,
  List,
  Detail,
  Versionlist,
  Version
}

export type AutogeneratedRoute = {
  path: string,
  mode: RouteMode,
  data?: any;
}

export class RouteRegistry {
  private static routes: {[key: string]: {constructor, mode: RouteMode, data: any}} = {};
  public static registerRoutes(routes: AutogeneratedRoute[], constructor) {
    for(let r of routes) {
      if(r.path in this.routes) {
        console.warn('Trying to register path ', r, ' multiple times');
      }
      else {
        // console.log('Registering', r.path);
        this.routes[r.path] = {
          constructor: constructor,
          mode: r.mode,
          data: r.data
        };
      }
    }
  }
  public static matchRoute(route: UrlSegment[]): {constructor: any, mode: RouteMode, params?: any} {
    for(let key in this.routes) {
      let segments = key.split('/');
      let segmentIndex = 0;
      if(segments.length !== route.length) {
        continue;
      }
      let routeParams = Object.assign({}, this.routes[key].data);
      while(segmentIndex < segments.length) {
        if(segments[segmentIndex].startsWith(':')) {
          routeParams[segments[segmentIndex].substr(1)] = route[segmentIndex].path;
        }
        else {
          if(segments[segmentIndex] !== route[segmentIndex].path) {
            break;
          }
        }
        segmentIndex++;
      }
      if(segmentIndex === segments.length) {
        // everything matches up, success
        return {
          constructor: this.routes[key].constructor,
          mode: this.routes[key].mode,
          params: routeParams
        }
      }
    }
    return {
      constructor: null,
      mode: RouteMode.None,
    }
  }
}

@Component({
  selector: 'propgen-catch-all',
  template: '<propgen-root></propgen-root>' +
  '<ng-container [ngSwitch]="mode">' +
  '  <propgen-automatic-model-form-list [type]="type" [params]="params" *ngSwitchCase="modeType.List"></propgen-automatic-model-form-list>' +
  '  <propgen-automatic-model-form [type]="type" [params]="params" *ngSwitchCase="modeType.Detail"></propgen-automatic-model-form>' +
  '  <propgen-automatic-model-form-version-list [type]="type" [params]="params" *ngSwitchCase="modeType.Versionlist"></propgen-automatic-model-form-version-list>' +
  '  <propgen-automatic-model-form-version [type]="type" [params]="params" *ngSwitchCase="modeType.Version"></propgen-automatic-model-form-version>' +
  '  <div *ngSwitchDefault>This is not the page you are looking for</div>' +
  '</ng-container>'
})
export class CatchAllComponent implements OnDestroy {
  public mode: RouteMode = RouteMode.None;
  public type: any;
  public params: any;
  private subscription: Subscription;
  // templates are not aware of enums, this is a workaround
  public modeType = RouteMode;
  constructor(activatedRoute: ActivatedRoute) {
    this.subscription = activatedRoute.url.subscribe((segments) => {
      let route = RouteRegistry.matchRoute(segments);
      this.mode = route.mode;
      this.type = route.constructor;
      this.params = route.params;
    });
  }
  ngOnDestroy() {
    if(this.subscription) {
      this.subscription.unsubscribe();
    }
  }
}
